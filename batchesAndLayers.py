import numpy as np

"""
Library Import:

    import numpy as np

    : This line imports the NumPy library, providing powerful functions for numerical computations. It's assigned the alias np for convenience.

Data Initialization:

    inputs: A list named inputs is created, containing three sub-lists. Each sub-list represents a single input vector with four elements. These input vectors will be fed into the neural network.
    weights: Similar to inputs, weights is a list containing three sub-lists. Each sub-list represents the weights for a single neuron in the layer, and the length of each sub-list (4 in this case) matches the number of elements in the input vectors. These weights determine the influence of each input on the neuron's output.
    biases: A list biases is created containing three bias values, one for each neuron in the layer. The bias term acts as an additional constant added to the neuron's activation.

Calculation:

    output = np.dot(inputs, np.array(weights).T) + biases: This line performs the core calculation using NumPy's efficient dot product function (np.dot). However, there's a correction made here:
        .T is used to transpose the weights list. In matrix multiplication, the number of columns in the first matrix (here, inputs) should match the number of rows in the second matrix (originally weights). By transposing weights, we ensure compatibility for the dot product.
        np.dot(inputs, np.array(weights).T) calculates the matrix multiplication between the transposed weights and each input vector in inputs. This effectively computes the weighted sum of inputs for each neuron.
        The element-wise addition with biases adds the bias term to each output from the dot product.
    The final output variable stores a list containing the results of these calculations for each input vector. It represents the outputs generated by the neural network for the provided inputs.

Output:

    print(output): This line prints the output list, which contains the neural network's outputs for each input vector in inputs.

"""

inputs = [
    [1,2,3,0.5],
    [3,2,1,-0.5],
    [3,1,2,3],
]

weights = [
    [0.2,0.8,-0.5,0.8],
    [0.4,0.3,0.2,0.1],
    [7,-3,0.3,0.5]
]

biases = [2,3,0.5]

# output = np.dot(inputs, weights) + biases  # dimensional error
output = np.dot(inputs, np.array(weights).T) + biases
print(output)